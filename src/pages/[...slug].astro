---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import RouteTargetHeading from '../components/RouteTargetHeading.astro';
import List from '../components/List.astro';
import Video from '../components/Video.astro';
import Breadcrumb from '../components/Breadcrumb.astro';

export async function getStaticPaths() {
  // Get all content from collections
  const posts = await getCollection('posts');
  const features = await getCollection('features');
  const talks = await getCollection('talks');

  // Create paths for all content types
  const allContent = [
    ...posts.map(post => ({ params: { slug: post.data.path.replace(/^\//, '').replace(/\/$/, '') }, props: { entry: post, type: 'post' } })),
    ...features.map(feature => ({ params: { slug: feature.data.path.replace(/^\//, '').replace(/\/$/, '') }, props: { entry: feature, type: 'feature' } })),
    ...talks.map(talk => ({ params: { slug: talk.data.path.replace(/^\//, '').replace(/\/$/, '') }, props: { entry: talk, type: 'talk' } }))
  ];

  return allContent;
}

type Props = {
  entry: CollectionEntry<'posts'> | CollectionEntry<'features'> | CollectionEntry<'talks'>;
  type: 'post' | 'feature' | 'talk';
};

const { entry, type } = Astro.props;
const { Content } = await entry.render();

// Get related content for sidebar
let relatedItems: any[] = [];
let divWrapperClassNames = "";
let sectionClassNames = "";
if (type === 'post') {
  divWrapperClassNames = "generic-wrap page-post-wrap";
  sectionClassNames = "page-post-detail breathing-room";
  const allPosts = await getCollection('posts');
  relatedItems = allPosts
    .filter(p => p.slug !== entry.slug && !p.data.unlisted)
    .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
    .slice(0, 10);
}
if (type === 'talk') {
  sectionClassNames = "generic-wrap page-wrap breathing-room";
}
if (type === 'feature') {
  sectionClassNames = "generic-wrap page-post-detail";
}
const formatDate = (date: Date) => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};
---

<BaseLayout
  title={entry.data.title}
  bodyClass={"page"}
  pathname={entry.data.path}
  description={entry.data.excerpt || entry.data.description}
  image={entry.data.coverImage}
>
  <div class={divWrapperClassNames}>
    <section class={sectionClassNames}>
      <article>
        <RouteTargetHeading targetID="global-nav">
          {entry.data.title}
        </RouteTargetHeading>

        {entry.data.date && type !== 'feature' && (
          <h2 class="subhead">{formatDate(entry.data.date)}</h2>
        )}
        {entry.data.videoSrcURL && entry.data.videoTitle ? <Video videoSrcURL={entry.data.videoSrcURL} videoTitle={entry.data.title} /> : null}
        <Content />
        <footer aria-label="Breadcrumb">
          <Breadcrumb url={type} section={`${type}s`} />
        </footer>
      </article>
    </section>

    {type === 'post' && relatedItems.length > 0 && (
      <aside class="page-post-list-wrap">
        <List
          className="list-writing-post breathing-room"
          items={relatedItems}
          listName="writing"
          subtitle="More Posts"
          pathname={Astro.url.pathname}
        />
      </aside>
    )}
  </div>
</BaseLayout>
